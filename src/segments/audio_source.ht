import "module:std" as std

var HttpClient = std.HttpClient

class AudioSourceEndpoint {
  var client: HttpClient

  construct (this.client)

  // List of containers and their supported qualities
  get supportedPresets -> List {
    return [
      { type: "lossy", name: "m4a", qualities: [ { bitrate: 44}, { bitrate: 96 }, { bitrate: 128 }, { bitrate: 256 } ] }.toJson(),
      { type: "lossy", name: "mp3", qualities: [ { bitrate: 128 }, { bitrate: 192 }, { bitrate: 256 }, { bitrate: 320 } ] }.toJson(),
      { type: "lossy", name: "ogg", qualities: [ { bitrate: 96 }, { bitrate: 160 }, { bitrate: 320 } ] }.toJson(),
      { type: "lossy", name: "webm", qualities: [ { bitrate: 96 }, { bitrate: 160 }, { bitrate: 320 } ] }.toJson(),
      { type: "lossless", name: "flac", qualities: [ { bitDepth: 16, sampleRate: 44100 } ]  }.toJson(),
      { type: "lossless", name: "wav", qualities: [ { bitDepth: 16, sampleRate: 44100 } ]  }.toJson()
    ]
  }
  
  /// Find matching audio sources for a given track. It can return one or multiple matches.
  /// The first match is considered the best match.
  fun matches(track: Map) -> List { // Map<SpotubeTrackObject> List<SpotubeAudioSourceMatchObject>
    // TODO: Implement method
  }

  /// For the given match, return all available streams.
  /// Each stream represents a unique combination of container and quality.
  fun streams(match: Map) -> List { // Map<SpotubeAudioSourceStreamObject> List<SpotubeAudioSourceStreamObject>
    // TODO: Implement method
  }
}

export { AudioSourceEndpoint }